${getVisibility(u.iclass)} ${isAbstract(u.iclass)}class ${u.name} {
<%if(u.activity){%>\
//${u.activity}
<%}%>
<%for(p in u.iclass.attributes){%>\
 ${getVisibility(p)} ${p.type} ${p.name};
<%}%>\
<%for(m in u.iclass.operations){%>\
${getVisibility(m)} ${m.returnType} ${m.name}(${extractParams(m.parameters)}){
 //${m.definition}\
<% for(int num=0;num < u.problist.size();num++) {%>
<%if(u.typelist.get(num)=="in" || u.typelist.get(num)=="fi"){%>\
<%}else if(u.typelist.get(num)=="ac"){%>\
 ${returndep()}//${u.problist.get(num)}\
<%}else if(u.typelist.get(num)=="do"){%>\
 ${returndep()}do{\
<%}else if(u.typelist.get(num)=="db"){%>\
 ${returndep()}}while(${u.problist.get(num).definition});\
<%}else if(u.typelist.get(num)=="fo"){%>\
 ${returndep()}for(${u.problist.get(num).definition}){\
<%}else if(u.typelist.get(num)=="wh"){%>\
 ${returndep()}while(${u.problist.get(num).definition}){\
<%}else if(u.typelist.get(num)=="fb" || u.typelist.get(num)=="ib" || u.typelist.get(num)=="en" || u.typelist.get(num)=="sn" || u.typelist.get(num)=="ble"){%>\
 ${returndep()}}\
<%}else if(u.typelist.get(num)=="tr"){%>\
 ${returndep()}try{\
<%}else if(u.typelist.get(num)=="ca"){%>\
 ${returndep()}catch(${inflow(u.problist.get(num)).guard}){\
<%}else if(u.typelist.get(num)=="fn"){%>\
 ${returndep()}finally{\
<%}else if(u.typelist.get(num)=="sb" || u.typelist.get(num)=="br"){%>\
 ${returndep()}break;\
<%}else if(u.typelist.get(num)=="bli"){%>\
 ${returndep()}${clientnode(u.problist.get(num)).name}:{\
<%}else if(u.typelist.get(num)=="bl"){%>\
 ${returndep()}break ${u.problist.get(num).name};\
<%}else{%>\
<%if(slicetype(u.typelist.get(num))[0]=="if"){%>\
<%if(slicetype(u.typelist.get(num))[1]=="1"){%>\
 ${returndep()}if(${outflow(u.problist.get(num) , parseint(slicetype(u.typelist.get(num))[1]) -1).guard}){\
<%}else{%>\
<%if(outflow(u.problist.get(num) , parseint(slicetype(u.typelist.get(num))[1]) -1).guard == "else"){%>\
 ${returndep()}else{\
<%}else{%>\
 ${returndep()}else if(${outflow(u.problist.get(num) , parseint(slicetype(u.typelist.get(num))[1]) -1).guard}){\
<%}%><%}%>\
<%}else if(slicetype(u.typelist.get(num))[0]=="sw"){%>\
<%if(slicetype(u.typelist.get(num))[1]=="1"){%>\
 ${returndep()}switch(${u.problist.get(num).getDefinition()}){
 ${returncsdep()}case ${casename(outflow(u.problist.get(num) , parseint(slicetype(u.typelist.get(num))[1]) -1).guard)} :\
<%}else{%>\
<%if(casename(outflow(u.problist.get(num) , parseint(slicetype(u.typelist.get(num))[1]) -1).guard) == " default "){%>\
 ${returndep()}default :\
<%}else{%>\
 ${returndep()}case ${casename(outflow(u.problist.get(num) , parseint(slicetype(u.typelist.get(num))[1]) -1).guard)} :\
<%}%><%}%>\
<%}else{%>\
 ${returndep()}nazo : ${u.problist.get(num)}
<%}%>\
<%}%>\
<%}%>\
//-------------------------------------------------

 }
<%}%>\
}

<%

def getVisibility(m){
	if(m.publicVisibility) return "public";
	if(m.protectedVisibility) return "protected";
	if(m.privateVisibility) return "private";
	return "" // package visibility	
}

def isAbstract(c){
	c.abstract ? "abstract":""
}
def extractParams(params){
	params.collect{it.type.name+" "+it.name}.join(", ")
}

def slicetype(ty){
	return dst = ty.split("_")
}

def parseint(st){
	return Integer.parseInt(st)
}

def outflow(node , num){
	return node.getOutgoings()[num]
}

def inflow(node){
	return node.getIncomings()[0]
}

def returndep(){
	int  dep = u.depthnum
	String st = ""
	for(int i = 0;i<dep;i++){
		st = st + "    "
	}
	return st
}

def returncsdep(){
	int  dep = u.scdepth
	String st = ""
	for(int i = 0;i<dep;i++){
		st = st + "    "
	}
	return st
}

def returnd(){
	return "   "
}

def casename(name){
	String[] st = name.trim().split(":",0);
	return st[1]
}

def clientnode(node){
	return node.getSupplierDependencies()[0].getClient()
}

%>\
